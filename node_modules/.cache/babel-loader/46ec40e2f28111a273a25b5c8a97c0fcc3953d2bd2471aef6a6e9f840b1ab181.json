{"ast":null,"code":"var _jsxFileName = \"D:\\\\PRITAM\\\\ass\\\\Mercor\\\\mercor\\\\src\\\\Main.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const [meetingLink, setMeetingLink] = useState('');\n  const [transcript, setTranscript] = useState('');\n  const [response, setResponse] = useState('');\n  const [audioContent, setAudioContent] = useState('');\n  const joinZoomMeeting = async () => {\n    try {\n      const response = await axios.post('/joinZoomMeeting', {\n        meetingLink\n      });\n      console.log('Joined Zoom meeting:', response.data.meetingId);\n    } catch (error) {\n      console.error('Failed to join Zoom meeting:', error);\n    }\n  };\n  const convertSpeechToText = async () => {\n    // Implement code to capture audio and convert it to a file (audioFile)\n\n    try {\n      const formData = new FormData();\n      formData.append('audioFile', audioFile);\n      const response = await axios.post('/speechToText', formData, {\n        headers: {\n          'Content-Type': 'multipart/form-data'\n        }\n      });\n      setTranscript(response.data.transcript);\n    } catch (error) {\n      console.error('Failed to convert speech to text:', error);\n    }\n  };\n  const processGPT = async () => {\n    try {\n      const response = await axios.post('/processGPT', {\n        text: transcript\n      });\n      setResponse(response.data.response);\n    } catch (error) {\n      console.error('Failed to process GPT:', error);\n    }\n  };\n  const convertTextToSpeech = async () => {\n    try {\n      const response = await axios.post('/textToSpeech', {\n        text: response\n      });\n      setAudioContent(response.data.audioContent);\n    } catch (error) {\n      console.error('Failed to convert text to speech:', error);\n    }\n  };\n  const sendSpeechToZoom = () => {\n    // Implement code to play audioContent through Zoom audio\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      value: meetingLink,\n      onChange: e => setMeetingLink(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: joinZoomMeeting,\n      children: \"Join Zoom Meeting\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: convertSpeechToText,\n      children: \"Convert Speech to Text\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: transcript\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: processGPT,\n      children: \"Process with GPT\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: response\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: convertTextToSpeech,\n      children: \"Convert Text to Speech\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: sendSpeechToZoom,\n      children: \"Send Speech to Zoom\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 57,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"m3W2Um1lbErG9i2DE1FxQk1GpKw=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","axios","jsxDEV","_jsxDEV","App","_s","meetingLink","setMeetingLink","transcript","setTranscript","response","setResponse","audioContent","setAudioContent","joinZoomMeeting","post","console","log","data","meetingId","error","convertSpeechToText","formData","FormData","append","audioFile","headers","processGPT","text","convertTextToSpeech","sendSpeechToZoom","children","type","value","onChange","e","target","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["D:/PRITAM/ass/Mercor/mercor/src/Main.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport axios from 'axios';\r\n\r\nconst App = () => {\r\n  const [meetingLink, setMeetingLink] = useState('');\r\n  const [transcript, setTranscript] = useState('');\r\n  const [response, setResponse] = useState('');\r\n  const [audioContent, setAudioContent] = useState('');\r\n\r\n  const joinZoomMeeting = async () => {\r\n    try {\r\n      const response = await axios.post('/joinZoomMeeting', { meetingLink });\r\n      console.log('Joined Zoom meeting:', response.data.meetingId);\r\n    } catch (error) {\r\n      console.error('Failed to join Zoom meeting:', error);\r\n    }\r\n  };\r\n\r\n  const convertSpeechToText = async () => {\r\n    // Implement code to capture audio and convert it to a file (audioFile)\r\n\r\n    try {\r\n      const formData = new FormData();\r\n      formData.append('audioFile', audioFile);\r\n      const response = await axios.post('/speechToText', formData, {\r\n        headers: { 'Content-Type': 'multipart/form-data' }\r\n      });\r\n      setTranscript(response.data.transcript);\r\n    } catch (error) {\r\n      console.error('Failed to convert speech to text:', error);\r\n    }\r\n  };\r\n\r\n  const processGPT = async () => {\r\n    try {\r\n      const response = await axios.post('/processGPT', { text: transcript });\r\n      setResponse(response.data.response);\r\n    } catch (error) {\r\n      console.error('Failed to process GPT:', error);\r\n    }\r\n  };\r\n\r\n  const convertTextToSpeech = async () => {\r\n    try {\r\n      const response = await axios.post('/textToSpeech', { text: response });\r\n      setAudioContent(response.data.audioContent);\r\n    } catch (error) {\r\n      console.error('Failed to convert text to speech:', error);\r\n    }\r\n  };\r\n\r\n  const sendSpeechToZoom = () => {\r\n    // Implement code to play audioContent through Zoom audio\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <input\r\n        type=\"text\"\r\n        value={meetingLink}\r\n        onChange={(e) => setMeetingLink(e.target.value)}\r\n      />\r\n      <button onClick={joinZoomMeeting}>Join Zoom Meeting</button>\r\n\r\n      <button onClick={convertSpeechToText}>Convert Speech to Text</button>\r\n      <p>{transcript}</p>\r\n\r\n      <button onClick={processGPT}>Process with GPT</button>\r\n      <p>{response}</p>\r\n\r\n      <button onClick={convertTextToSpeech}>Convert Text to Speech</button>\r\n\r\n      <button onClick={sendSpeechToZoom}>Send Speech to Zoom</button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}